searchState.loadedDescShard("surf_disco", 0, "Surf Disco: a client library for Tide Disco applications.\nThe ACL method modifies the access control list (which can …\nA collection can be placed under baseline control with a …\nThe BIND method modifies the collection identified by the …\nA CHECKIN request can be applied to a checked-out …\nA CHECKOUT request can be applied to a checked-in …\nThe CONNECT method requests that the recipient establish a …\nThe COPY method creates a duplicate of the source resource …\nThe DELETE method requests that the origin server remove …\nErrors which can be serialized in a response body.\nThe GET method requests transfer of a current selected …\nThe HEAD method is identical to GET except that the server …\nA LABEL request can be applied to a version to modify the …\nThe LINK method establishes one or more Link relationships …\nThe LOCK method is used to take out a lock of any access …\nThe MERGE method performs the logical merge of a specified …\nHTTP request methods.\nA MKACTIVITY request creates a new activity resource.\nAn HTTP request using the MKCALENDAR method creates a new …\nMKCOL creates a new collection resource at the location …\nThe MKREDIRECTREF method requests the creation of a …\nA MKWORKSPACE request creates a new workspace resource.\nThe MOVE operation on a non-collection resource is the …\nThe OPTIONS method requests information about the …\nThe ORDERPATCH method is used to change the ordering …\nThe PATCH method requests that a set of changes described …\nThe POST method requests that the target resource process …\nThis method is never used by an actual client. This method …\nThe PROPFIND method retrieves properties defined on the …\nThe PROPPATCH method processes instructions specified in …\nThe PUT method requests that the state of the target …\nThe REBIND method removes a binding to a resource from a …\nA REPORT request is an extensible mechanism for obtaining …\nThe client invokes the SEARCH method to initiate a …\nSerializable HTTP status code.\nThe TRACE method requests a remote, application-level …\nThe UNBIND method modifies the collection identified by …\nAn UNCHECKOUT request can be applied to a checked-out …\nThe UNLINK method removes one or more Link relationships …\nThe UNLOCK method removes the lock identified by the lock …\nThe UPDATE method modifies the content and dead properties …\nThe UPDATEREDIRECTREF method requests the update of a …\nA parsed URL record.\nA VERSION-CONTROL request can be used to create a …\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nThe canonical reason for a given status code\nConnect to a server, retrying if the server is not running.\nSerialize with Serde using the internal representation of …\nIf this URL has a host and it is a domain name (not an IP …\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nBuild an HTTP <code>GET</code> request.\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this URL.\nReturns <code>true</code> if the status code is the <code>4xx</code> range.\nReturns <code>true</code> if the status code is <code>1xx</code> range.\nReturns <code>true</code> if the status code is the <code>3xx</code> range.\nWhether a method is considered “safe”, meaning the …\nReturns <code>true</code> if the status code is the <code>5xx</code> range.\nReturn whether the URL is special (has a special scheme)\nReturns <code>true</code> if the status code is the <code>2xx</code> range.\nParse a string as an URL, with this URL as the base URL.\nCreates a relative URL if possible, with this URL as the …\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nBuild an HTTP <code>POST</code> request.\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nReturn the scheme of this URL, lower-cased, as an ASCII …\nSerialize with Serde using the internal representation of …\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nReturn the username for this URL (typically the empty …\nA client of a Tide Disco application.\nInterface to specify optional configuration values before …\nContent types supported by Tide Disco.\nA response to a healthcheck endpoint.\nCommon health statuses of an application.\nCreate a Client with the settings specified in this …\nCreate a client with customization.\nConnect to the server, retrying if the server is not …\nSet the content type used for responses.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild an HTTP <code>GET</code> request.\nQuery the server’s healthcheck endpoint.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a client for a sub-module of the connected …\nCreate a client and connect to the Tide Disco server at …\nBuild an HTTP <code>POST</code> request.\nBuild an HTTP request with the specified method.\nSet connection timeout duration.\nBuild a streaming connection request.\nThe status of this health check.\nConnect to the server, retrying until the server is <code>healthy</code>…\nThe simplest possible implementation of Error.\nErrors which can be serialized in a response body.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet the request body using [bincode].\nSet the request body using JSON.\nReturns the argument unchanged.\nSet a header on the request.\nCalls <code>U::from(self)</code>.\nSend the request and await a response from the server.\nA bi-directional connection to a WebSocket server.\nUnconstructable enum used to disable the Sink …\nStart the WebSocket handshake and initiate a connection to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet a header on the request.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitiate a unidirectional connection to the server.")