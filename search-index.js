var searchIndex = new Map(JSON.parse('[\
["surf_disco",{"doc":"Surf Disco: a client library for Tide Disco applications.","t":"TTPTTPPTTTPPEPEPPTKTTTTTPTPTTTTTTTPPPTTTTTPGPPPPPPTTTTTTTTTPPTTTTTTTTPPPPPPTTTTPPETTTPEFTTPTTTTTTTPPPPPPFTPNNNNNNNNNNNNMCNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNCNNNNNNNNNNNNNNCNMNNNNNNNNNNNNNNNNNNNNNNNNPPFFGKGPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNFKNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNONNMNONNNNNNFNNNNNNNNNNNNNNFFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ACCEPTED","ALREADY_REPORTED","Acl","BAD_GATEWAY","BAD_REQUEST","BaselineControl","Bind","CONFLICT","CONTINUE","CREATED","Checkin","Checkout","Client","Connect","ContentType","Copy","Delete","EXPECTATION_FAILED","Error","FAILED_DEPENDENCY","FORBIDDEN","FOUND","GATEWAY_TIMEOUT","GONE","Get","HTTP_VERSION_NOT_SUPPORTED","Head","IM_A_TEAPOT","IM_USED","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","LENGTH_REQUIRED","LOCKED","LOOP_DETECTED","Label","Link","Lock","METHOD_NOT_ALLOWED","MISDIRECTED_REQUEST","MOVED_PERMANENTLY","MULTIPLE_CHOICES","MULTI_STATUS","Merge","Method","MkActivity","MkCalendar","MkCol","MkRedirectRef","MkWorkspace","Move","NETWORK_AUTHENTICATION_REQUIRED","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_EXTENDED","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","NO_CONTENT","OK","Options","OrderPatch","PARTIAL_CONTENT","PAYLOAD_TOO_LARGE","PAYMENT_REQUIRED","PERMANENT_REDIRECT","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","Patch","Post","Pri","PropFind","PropPatch","Put","RANGE_NOT_SATISFIABLE","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","RESET_CONTENT","Rebind","Report","Request","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","Search","SocketRequest","StatusCode","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","Trace","UNAUTHORIZED","UNAVAILABLE_FOR_LEGAL_REASONS","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","UPGRADE_REQUIRED","URI_TOO_LONG","USE_PROXY","Unbind","Uncheckout","Unlink","Unlock","Update","UpdateRedirectRef","Url","VARIANT_ALSO_NEGOTIATES","VersionControl","as_ref","as_ref","as_str","authority","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cannot_be_a_base","canonical_reason","catch_all","client","clone","clone","clone","clone_into","clone_into","clone_into","cmp","compare","connect","deserialize","deserialize","deserialize","deserialize_internal","domain","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","fmt","fmt","fmt","fmt","fragment","from","from","from","from","from","from_config_error","from_directory_path","from_file_path","from_io_error","from_request_error","from_route_error","from_server_error","from_socket_error","from_str","from_str","get","has_authority","has_host","hash","hash","hash","host","host_str","http","index","index","index","index","into","into","into","into_client_request","into_client_request","into_resettable","into_string","into_tide_error","is_client_error","is_informational","is_redirection","is_safe","is_server_error","is_special","is_success","join","make_relative","options","origin","parse","parse_with_params","partial_cmp","password","path","path_segments","path_segments_mut","port","port_or_known_default","post","query","query_pairs","query_pairs_mut","request","scheme","serialize","serialize","serialize","serialize_internal","set_fragment","set_host","set_ip_host","set_password","set_path","set_port","set_query","set_scheme","set_username","socket","socket_addrs","status","to_file_path","to_listener","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","username","vzip","vzip","vzip","Available","Binary","Client","ClientBuilder","ContentType","HealthCheck","HealthStatus","Initializing","Json","ShuttingDown","TemporarilyUnavailable","Unavailabale","Unhealthy","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone_into","clone_into","clone_into","connect","content_type","default","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","get","healthcheck","into","into","into","into","module","new","post","request","serialize","set_timeout","socket","status","status","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wait_for_health","ClientError","Error","as_error_source","backtrace","borrow","borrow_mut","catch_all","catch_all","cause","clone","clone_into","description","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from_config_error","from_io_error","from_request_error","from_route_error","from_server_error","from_socket_error","into","into_tide_error","message","serialize","source","status","status","status","to_owned","to_string","try_from","try_into","type_id","vzip","Request","body_binary","body_json","borrow","borrow_mut","fmt","from","from","header","into","send","try_from","try_into","type_id","vzip","Connection","SocketRequest","Unsupported","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","connect","deserialize","drop","fmt","fmt","from","from","from","header","into","into","into","into_stream","poll_close","poll_flush","poll_next","poll_ready","serialize","start_send","subscribe","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"surf_disco"],[262,"surf_disco::client"],[343,"surf_disco::error"],[389,"surf_disco::request"],[404,"surf_disco::socket"],[449,"core::option"],[450,"alloc::string"],[451,"core::cmp"],[452,"core::time"],[453,"core::result"],[454,"serde::de"],[455,"http::status"],[456,"http_types::status_code"],[457,"core::fmt"],[458,"core::fmt"],[459,"std::path"],[460,"core::convert"],[461,"std::io::error"],[462,"tide_disco::request"],[463,"tide_disco::route"],[464,"core::fmt"],[465,"tide_disco::socket"],[466,"url::parser"],[467,"serde::de"],[468,"core::hash"],[469,"url::host"],[470,"url::slicing"],[471,"core::ops::range"],[472,"core::ops::range"],[473,"tungstenite::error"],[474,"clap_builder::builder::resettable"],[475,"url"],[476,"url::origin"],[477,"core::iter::traits::collect"],[478,"core::str::iter"],[479,"url::path_segments"],[480,"form_urlencoded"],[481,"url"],[482,"core::net::ip_addr"],[483,"core::net::socket_addr"],[484,"alloc::vec"],[485,"core::ops::function"],[486,"std::path"],[487,"core::fmt"],[488,"std::backtrace"],[489,"serde::ser"],[490,"http_types::headers::header_name"],[491,"core::convert"],[492,"core::marker"],[493,"core::pin"],[494,"core::task::wake"],[495,"core::task::poll"]],"d":["","","The ACL method modifies the access control list (which can …","","","A collection can be placed under baseline control with a …","The BIND method modifies the collection identified by the …","","","","A CHECKIN request can be applied to a checked-out …","A CHECKOUT request can be applied to a checked-in …","","The CONNECT method requests that the recipient establish a …","","The COPY method creates a duplicate of the source resource …","The DELETE method requests that the origin server remove …","","Errors which can be serialized in a response body.","","","","","","The GET method requests transfer of a current selected …","","The HEAD method is identical to GET except that the server …","","","","","","","","A LABEL request can be applied to a version to modify the …","The LINK method establishes one or more Link relationships …","The LOCK method is used to take out a lock of any access …","","","","","","The MERGE method performs the logical merge of a specified …","HTTP request methods.","A MKACTIVITY request creates a new activity resource.","An HTTP request using the MKCALENDAR method creates a new …","MKCOL creates a new collection resource at the location …","The MKREDIRECTREF method requests the creation of a …","A MKWORKSPACE request creates a new workspace resource.","The MOVE operation on a non-collection resource is the …","","","","","","","","","","The OPTIONS method requests information about the …","The ORDERPATCH method is used to change the ordering …","","","","","","","","","The PATCH method requests that a set of changes described …","The POST method requests that the target resource process …","This method is never used by an actual client. This method …","The PROPFIND method retrieves properties defined on the …","The PROPPATCH method processes instructions specified in …","The PUT method requests that the state of the target …","","","","","The REBIND method removes a binding to a resource from a …","A REPORT request is an extensible mechanism for obtaining …","","","","","The client invokes the SEARCH method to initiate a …","","Serializable HTTP status code.","","","The TRACE method requests a remote, application-level …","","","","","","","","The UNBIND method modifies the collection identified by …","An UNCHECKOUT request can be applied to a checked-out …","The UNLINK method removes one or more Link relationships …","The UNLOCK method removes the lock identified by the lock …","The UPDATE method modifies the content and dead properties …","The UPDATEREDIRECTREF method requests the update of a …","A parsed URL record.","","A VERSION-CONTROL request can be used to create a …","","","Return the serialization of this URL.","Return the authority of this URL as an ASCII string.","","","","","","","Return whether this URL is a cannot-be-a-base URL, meaning …","The canonical reason for a given status code","","","","","","","","","","","Connect to a server, retrying if the server is not running.","","","","Serialize with Serde using the internal representation of …","If this URL has a host and it is a domain name (not an IP …","","","","","","","","","","","","","","","","","","","","","","","","","Return this URL’s fragment identifier, if any.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Convert a directory name as <code>std::path::Path</code> into an URL in …","Convert a file name as <code>std::path::Path</code> into an URL in the …","","","","","","","","Build an HTTP <code>GET</code> request.","Return whether the URL has an ‘authority’, which can …","Equivalent to <code>url.host().is_some()</code>.","","","","Return the parsed representation of the host for this URL. …","Return the string representation of the host (domain or IP …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Return the serialization of this URL.","","Returns <code>true</code> if the status code is the <code>4xx</code> range.","Returns <code>true</code> if the status code is <code>1xx</code> range.","Returns <code>true</code> if the status code is the <code>3xx</code> range.","Whether a method is considered “safe”, meaning the …","Returns <code>true</code> if the status code is the <code>5xx</code> range.","Return whether the URL is special (has a special scheme)","Returns <code>true</code> if the status code is the <code>2xx</code> range.","Parse a string as an URL, with this URL as the base URL.","Creates a relative URL if possible, with this URL as the …","Return a default <code>ParseOptions</code> that can fully configure the …","Return the origin of this URL (…","Parse an absolute URL from a string.","Parse an absolute URL from a string and add params to its …","","Return the password for this URL, if any, as a …","Return the path for this URL, as a percent-encoded ASCII …","Unless this URL is cannot-be-a-base, return an iterator of …","Return an object with methods to manipulate this URL’s …","Return the port number for this URL, if any.","Return the port number for this URL, or the default port …","Build an HTTP <code>POST</code> request.","Return this URL’s query string, if any, as a …","Parse the URL’s query string, if any, as …","Manipulate this URL’s query string, viewed as a sequence …","","Return the scheme of this URL, lower-cased, as an ASCII …","","","","Serialize with Serde using the internal representation of …","Change this URL’s fragment identifier.","Change this URL’s host.","Change this URL’s host to the given IP address.","Change this URL’s password.","Change this URL’s path.","Change this URL’s port number.","Change this URL’s query string.","Change this URL’s scheme.","Change this URL’s username.","","Resolve a URL’s host and port number to <code>SocketAddr</code>.","","Assuming the URL is in the <code>file</code> scheme or similar, convert …","","","","","","","","","","","","","","","","","","","","Return the username for this URL (typically the empty …","","","","","","A client of a Tide Disco application.","Interface to specify optional configuration values before …","Content types supported by Tide Disco.","A response to a healthcheck endpoint.","Common health statuses of an application.","","","","","","","","","","","","","","","Create a Client with the settings specified in this …","Create a client with customization.","","","","","","","Connect to the server, retrying if the server is not …","Set the content type used for responses.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Build an HTTP <code>GET</code> request.","Query the server’s healthcheck endpoint.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a client for a sub-module of the connected …","Create a client and connect to the Tide Disco server at …","Build an HTTP <code>POST</code> request.","Build an HTTP request with the specified method.","","Set connection timeout duration.","Build a streaming connection request.","The status of this health check.","","","","","","","","","","","","","","","","","","","","","Connect to the server, retrying until the server is <code>healthy</code>…","The simplest possible implementation of Error.","Errors which can be serialized in a response body.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Set the request body using [bincode].","Set the request body using JSON.","","","","","Returns the argument unchanged.","Set a header on the request.","Calls <code>U::from(self)</code>.","Send the request and await a response from the server.","","","","","A bi-directional connection to a WebSocket server.","","Unconstructable enum used to disable the Sink …","","","","","","","","","Start the WebSocket handshake and initiate a connection to …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Set a header on the request.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Initiate a unidirectional connection to the server.","","","","","","","","","","","","","",""],"i":[5,5,3,5,5,3,3,5,5,5,3,3,0,3,0,3,3,5,0,5,5,5,5,5,3,5,3,5,5,5,5,5,5,5,3,3,3,5,5,5,5,5,3,0,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,3,3,5,5,5,5,5,5,5,5,3,3,3,3,3,3,5,5,5,5,3,3,0,5,5,5,3,0,0,5,5,3,5,5,5,5,5,5,5,3,3,3,3,3,3,0,5,3,1,3,1,1,1,5,3,1,5,3,1,5,8,0,1,5,3,1,5,3,1,1,0,1,5,3,1,1,1,5,5,5,3,1,1,1,1,5,5,5,5,3,3,3,3,0,1,1,5,5,3,3,1,1,5,5,5,3,8,1,1,8,8,8,8,8,1,3,0,1,1,1,5,3,1,1,0,1,1,1,1,1,5,3,1,1,1,1,8,5,5,5,3,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,5,3,1,1,1,1,1,1,1,1,1,1,0,1,8,1,1,1,5,3,1,5,3,1,1,5,5,3,3,1,5,3,1,5,3,1,1,5,3,62,61,0,0,0,0,0,62,61,62,62,62,62,59,61,60,62,59,61,60,62,59,60,61,60,62,61,60,62,60,59,62,62,62,62,62,62,62,61,60,62,59,61,60,60,62,60,60,59,61,60,62,60,60,60,60,62,59,60,64,62,61,60,62,59,61,60,62,59,61,60,62,59,61,60,62,59,61,60,62,60,0,0,67,67,67,67,8,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,8,8,8,8,8,8,67,8,67,67,67,8,67,67,67,67,67,67,67,67,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,76,65,75,76,65,75,75,75,65,75,76,65,75,76,65,75,65,76,65,75,76,76,76,76,76,75,76,65,75,76,65,75,76,65,75,76,76,65,75,76,65,75],"f":"```````````````````````````````````````````````````````````````````````````````````````````````````````````{bd}{fd}11{ce{}{}}00000{bh}{j{{l{d}}}}{{jn}A`}`{bb}{jj}{ff}{{ce}Ab{}{}}00{{bb}Ad}{{ce}Ad{}{}}{{b{l{Af}}}h}{c{{Ah{b}}}Aj}{c{{Ah{j}}}Aj}{c{{Ah{f}}}Aj}2{b{{l{d}}}}{{bb}h}{{jAl}h}{{jAn}h}{{jj}h}{{ff}h}{{ce}h{}{}}00000000000`{{bB`}{{Ah{AbBb}}}}0{{jB`}{{Ah{AbBb}}}}0{{fB`}{{Ah{AbBb}}}}09{cc{}}0{Alj}{Anj}2{BdA`}{c{{Ah{bAb}}}{{Bh{Bf}}}}0{BjA`}{BlA`}{{{Bn{c}}}A`C`}{CbA`}{{{Cd{c}}}A`C`}{d{{Ah{bCf}}}}{d{{Ah{f}}}}{b{{Ch{ceg}}}CjA`Cl}{bh}0{{bc}AbCn}{{jc}AbCn}{{fc}AbCn}{b{{l{{D`{d}}}}}}{b{{l{d}}}}`{{b{Dd{Db}}}d}{{b{Df{Db}}}d}{{b{Dh{Db}}}d}{{bDj}d}{ce{}{}}00{b{{Ah{{Dl{Ab}}Dn}}}}0{c{{E`{n}}}{}}{bn}{A`Cb}{jh}00{fh}1{bh}2{{bd}{{Ah{bCf}}}}{{bb}{{l{n}}}}{{}Eb}{bEd}{d{{Ah{bCf}}}}{{dc}{{Ah{bCf}}}Ef}{{bb}{{l{Ad}}}}{b{{l{d}}}}{bd}{b{{l{{Ej{Eh}}}}}}{b{{Ah{ElAb}}}}{b{{l{En}}}}0{b{{Ch{ceg}}}CjA`Cl}5{bF`}{b{{Fd{Fb}}}}`6{{bc}AhFf}{{jc}AhFf}{{fc}AhFf}2{{b{l{d}}}Ab}{{b{l{d}}}{{Ah{AbCf}}}}{{bFh}{{Ah{AbAb}}}}{{b{l{d}}}{{Ah{AbAb}}}}{{bd}Ab}{{b{l{En}}}{{Ah{AbAb}}}}5{{bd}{{Ah{AbAb}}}}0`{{bc}{{Ah{{Fl{Fj}}Bj}}}{{G`{}{{Fn{{l{En}}}}}}}}{A`j}{b{{Ah{GbAb}}}}{b{{Ah{Bj}}}}{ce{}{}}00{cn{}}00{d{{Ah{b}}}}{c{{Ah{e}}}{}{}}{En{{Ah{j}}}}11{d{{Ah{f}}}}222{cGd{}}00{bd}777`````````````77777777{{{Gf{ce}}}{{Gh{ce}}}A`Cl}{b{{Gf{ce}}}A`Cl}{GjGj}{{{Gh{ce}}}{{Gh{ce}}}{}Cl}{GlGl}{{ce}Ab{}{}}00{{{Gh{ce}}{l{Af}}}hA`Cl}{{{Gf{ce}}Gj}{{Gf{ce}}}A`Cl}{{}Gl}{c{{Ah{Gl}}}Aj}{{GlGl}h}{{ce}h{}{}}000{{GjB`}Gn}{{{Gh{ce}}B`}Gn{}Cl}{{GlB`}{{Ah{AbBb}}}}{cc{}}00?0{{{Gh{ce}}d}{{Ch{gce}}}A`ClCj}{{{Gh{ce}}}{{Ah{gc}}}A`Cl{CjH`}}{ce{}{}}000{{{Gh{ce}}d}{{Ah{{Gh{ge}}Cf}}}A`ClA`}{b{{Gh{ce}}}A`Cl}4{{{Gh{ce}}fd}{{Ch{gce}}}A`ClCj}{{Glc}AhFf}{{{Gf{ce}}{l{Af}}}{{Gf{ce}}}A`Cl}{{{Gh{ce}}d}{{Hb{ce}}}A`Cl}{H`j}{Glj}888{c{{Ah{e}}}{}{}}0000000{cGd{}}000::::{{{Gh{ce}}i{l{Af}}}{{l{g}}}A`Cl{CjH`}{{G`{g}{{Fn{h}}}}}}``{cHd{}}{Hf{{l{Hh}}}}=={{jn}A`}{{jn}Hf}{Hf{{l{Hd}}}}{HfHf}{{ce}Ab{}{}}{Hfd}{c{{Ah{Hf}}}Aj}{{HfHf}h}{{ce}h{}{}}000{{HfB`}{{Ah{AbBb}}}}0{{{Bn{c}}}HfC`}{BjHf}{cc{}}{BdHf}{BlHf}{{{Cd{c}}}HfC`}{BdA`}{BjA`}{BlA`}{{{Bn{c}}}A`C`}{CbA`}{{{Cd{c}}}A`C`}{ce{}{}}{A`Cb}`{{Hfc}AhFf}{Hf{{l{Hd}}}}{A`j}{Hfj}`5{cn{}}{c{{Ah{e}}}{}{}}0{cGd{}}8`{{{Ch{ceg}}i}{{Ah{{Ch{ceg}}e}}}CjA`ClHj}099{{{Ch{ceg}}B`}GnHlHl{HlCl}}{Hn{{Ch{ceg}}}{}{}Cl}{cc{}}{{{Ch{ceg}}ik}{{Ch{ceg}}}CjA`Cl{{Ib{I`}}}Id}={{{Ch{ceg}}}{{Ah{ce}}}CjA`Cl}776>```>>>>>>{IfIf}{{ce}Ab{}{}}{{{Hb{ce}}}{{Ah{{Ih{gice}}c}}}A`ClCj{HjIj}}{c{{Ah{If}}}Aj}{{{Ih{cegi}}}Ab{}Ij{}Cl}{{{Hb{ce}}B`}GnHl{HlCl}}{{IfB`}Gn}999{{{Hb{ce}}gi}{{Hb{ce}}}A`Cl{{Ib{I`}}}Id}{ce{}{}}000{{{Il{{Ih{cegi}}}}In}{{J`{{Ah{Abk}}}}}{}{HjIj}A`Cl{}}0{{{Il{{Ih{cegi}}}}In}{{J`{{l{k}}}}}CjIjA`Cl{}}1{{Ifc}AhFf}{{{Il{{Ih{cegi}}}}e}{{Ah{Abk}}}{}{HjIj}A`Cl{}}{{{Hb{ce}}}{{Ah{{Ih{gIfce}}c}}}A`ClCj}5{c{{Ah{e}}}{}{}}00000{{{Il{c}}In}{{J`{{l{Ah}}}}}{}}{cGd{}}00888","c":[194],"p":[[5,"Url",0],[1,"str"],[6,"Method",0],[1,"bool"],[5,"StatusCode",0],[6,"Option",449],[5,"String",450],[10,"Error",0],[1,"unit"],[6,"Ordering",451],[5,"Duration",452],[6,"Result",453],[10,"Deserializer",454],[5,"StatusCode",455],[6,"StatusCode",456],[5,"Formatter",457],[5,"Error",457],[6,"ConfigError",458],[5,"Path",459],[10,"AsRef",460],[5,"Error",461],[6,"RequestError",462],[6,"RouteError",463],[10,"Display",457],[5,"Error",464],[6,"SocketError",465],[6,"ParseError",466],[5,"Request",389],[10,"DeserializeOwned",454],[10,"StaticVersionType",467],[10,"Hasher",468],[6,"Host",469],[6,"Position",470],[5,"Range",471],[5,"RangeFrom",471],[5,"RangeTo",471],[5,"RangeFull",471],[5,"Request",472],[6,"Error",473],[6,"Resettable",474],[5,"ParseOptions",475],[6,"Origin",476],[10,"IntoIterator",477],[1,"char"],[5,"Split",478],[5,"PathSegmentsMut",479],[1,"u16"],[5,"Parse",480],[5,"UrlQuery",475],[5,"Serializer",480],[10,"Serializer",481],[6,"IpAddr",482],[6,"SocketAddr",483],[5,"Vec",484],[17,"Output"],[10,"Fn",485],[5,"PathBuf",459],[5,"TypeId",486],[5,"ClientBuilder",262],[5,"Client",262],[6,"ContentType",262],[6,"HealthStatus",262],[8,"Result",457],[10,"HealthCheck",262],[5,"SocketRequest",404],[10,"Error",487],[5,"ClientError",343],[5,"Backtrace",488],[10,"Serialize",481],[10,"Debug",457],[5,"RequestBuilder",489],[5,"HeaderName",490],[10,"Into",460],[10,"ToHeaderValues",491],[6,"Unsupported",404],[5,"Connection",404],[10,"Sized",492],[5,"Pin",493],[5,"Context",494],[6,"Poll",495]],"b":[[136,"impl-PartialEq%3CStatusCode%3E-for-StatusCode"],[137,"impl-PartialEq%3CStatusCode%3E-for-StatusCode"],[138,"impl-PartialEq-for-StatusCode"],[153,"impl-Debug-for-Url"],[154,"impl-Display-for-Url"],[155,"impl-Debug-for-StatusCode"],[156,"impl-Display-for-StatusCode"],[157,"impl-Display-for-Method"],[158,"impl-Debug-for-Method"],[162,"impl-From%3CStatusCode%3E-for-StatusCode"],[163,"impl-From%3CStatusCode%3E-for-StatusCode"],[184,"impl-Index%3CRange%3CPosition%3E%3E-for-Url"],[185,"impl-Index%3CRangeFrom%3CPosition%3E%3E-for-Url"],[186,"impl-Index%3CRangeTo%3CPosition%3E%3E-for-Url"],[187,"impl-Index%3CRangeFull%3E-for-Url"],[191,"impl-IntoClientRequest-for-Url"],[192,"impl-IntoClientRequest-for-%26Url"],[361,"impl-Debug-for-ServerError"],[362,"impl-Display-for-ServerError"],[363,"impl-From%3CRouteError%3CE%3E%3E-for-ServerError"],[364,"impl-From%3CError%3E-for-ServerError"],[366,"impl-From%3CConfigError%3E-for-ServerError"],[367,"impl-From%3CRequestError%3E-for-ServerError"],[368,"impl-From%3CSocketError%3CE%3E%3E-for-ServerError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
